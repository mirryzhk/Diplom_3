{"name": "Проверка перехода на экран 'Восстановление пароля' после ввода пароля и клика по кнопке 'Восстановить'", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: Given xpath expression \"(//a[@class = 'AppHeader_header__link__3D_hX' and @href='/account']\" is invalid: SyntaxError: Document.evaluate: The expression is not a legal expression; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nInvalidSelectorError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:432:5\nfind_@chrome://remote/content/shared/DOM.sys.mjs:170:11", "trace": "self = <tests.test_recovery_password_page.TestRecoveryPassPage object at 0x0000023515CF1DC0>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"3f6fbab1-498d-4219-8774-b07e9f5a3c6e\")>\n\n    @allure.title(\"Проверка перехода на экран 'Восстановление пароля' после ввода пароля и клика по кнопке \"\n                  \"'Восстановить'\")\n    @allure.description(\"Проверка ввода почты и клика по кнопке 'Восстановить'\")\n    def test_input_email_and_click_button_success(self, driver):\n        main_page = MainPage(driver)\n        main_page.open()\n>       main_page.click_account_button()\n\ntests\\test_recovery_password_page.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\main_page.py:71: in click_account_button\n    account_button = self.wait_and_find_element(MainPageLocators.BUTTON_ACCOUNT)\npages\\base_page.py:11: in wait_and_find_element\n    WebDriverWait(self.driver, 5).until(expected_conditions.visibility_of_element_located(locator))\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000235174DC080>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"Given xpath expression \\\\\"(//a[@class = \\'Ap.../remote/content/shared/webdriver/Errors.sys.mjs:432:5\\\\nfind_@chrome://remote/content/shared/DOM.sys.mjs:170:11\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: Given xpath expression \"(//a[@class = 'AppHeader_header__link__3D_hX' and @href='/account']\" is invalid: SyntaxError: Document.evaluate: The expression is not a legal expression; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       InvalidSelectorError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:432:5\nE       find_@chrome://remote/content/shared/DOM.sys.mjs:170:11\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSelectorException"}, "description": "Проверка ввода почты и клика по кнопке 'Восстановить'", "steps": [{"name": "Открытие в браузере страницы 'Stellar Burger'", "status": "passed", "start": 1737578943999, "stop": 1737578944241}, {"name": "Клик по кнопке 'Личный кабинет' в шапке страницы", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: Given xpath expression \"(//a[@class = 'AppHeader_header__link__3D_hX' and @href='/account']\" is invalid: SyntaxError: Document.evaluate: The expression is not a legal expression; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nInvalidSelectorError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:432:5\nfind_@chrome://remote/content/shared/DOM.sys.mjs:170:11\n\n", "trace": "  File \"C:\\Users\\User\\PycharmProjects\\Diplom\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom\\Diplom3\\pages\\main_page.py\", line 71, in click_account_button\n    account_button = self.wait_and_find_element(MainPageLocators.BUTTON_ACCOUNT)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom\\Diplom3\\pages\\base_page.py\", line 11, in wait_and_find_element\n    WebDriverWait(self.driver, 5).until(expected_conditions.visibility_of_element_located(locator))\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 96, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 156, in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 770, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1737578944241, "stop": 1737578944298}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1737578943999, "stop": 1737578944302, "uuid": "5f482d43-0581-4c3f-b469-b623fae087c0", "historyId": "c9c80d5fc817772f78f0f32cead989c9", "testCaseId": "533c4f32d6d3a3d3871d910a1861722e", "fullName": "tests.test_recovery_password_page.TestRecoveryPassPage#test_input_email_and_click_button_success", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_recovery_password_page"}, {"name": "subSuite", "value": "TestRecoveryPassPage"}, {"name": "host", "value": "01ms32"}, {"name": "thread", "value": "26028-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_recovery_password_page"}]}